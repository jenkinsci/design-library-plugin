description.1=In Jenkins, you can export arbitrary server-side Java object to JavaScript via a proxy, \
   then invoke their methods from JavaScript. In this sample, we call a method on the server to increment a counter. \
   This object is a singleton, so you''ll see the same counter value across all the browsers.
description.2=To expose a method of a Java class to JavaScript proxy, annotate the method with <code>@JavaScriptMethod</code>. \
   For security reasons, only public methods on public classes annotated with this annotation are invokable from browsers:
description.3=Then from Jelly scripts, use <code>st:bind</code> tag to export a Java object into a proxy. \
   The "value" attribute evaluates to a server-side Java object to be exported, and the tag produces a JavaScript \
   expression that creates a proxy. In the example below, we are pretending that the \
   <a href="https://commons.apache.org/proper/commons-jexl/">JEXL</a> expression evaluates to some instance of Foo.
description.4=Below, you can find the sample for the adjunct to include. More information about adjuncts can be found \
   <a href="https://www.jenkins.io/doc/developer/security/csp/#inline-javascript-blocks">on the security page</a>.
invokingMethod=Invoking method
invokingMethod.description.1=As you can see above, one can invoke methods on the proxy created by the <code>st:bind</code> tag. \
   The JavaScript method takes the arguments that the Java method takes, then it can optionally take a function as an additional parameter, \
   which is used as a callback method when the return value is available. The callback method receives an Ajax.Response object.
invokingMethod.description.2=If the Java method returns an object value (such as <code>int, String, Collection, Object[], JSONObject</code>, etc.), \
   you can use the <code>responseObject()</code> method to evaluate the response into a JavaScript object and use it. \
   If the Java method renders more complex HTTP response (for example by writing directly to \
   <code>StaplerResponse</code> or returning an <code>HttpResponse</code>), JavaScript can use other <code>Ajax.Response</code> methods to access the full HTTP response.
invokingMethod.description.3=The method call uses <code>XmlHttpRequest</code> underneath, \
   and it gets eventually routed to the corresponding method call on the exact instance that was exported.
tips=Tips
tips.description.1=Parameters of the server Java method.
tips.description.1.body=The Java method can define arbitrary number of parameters for JavaScript. \
   Each parameter is converted from JSON to Java via <code>StaplerRequest.bindJSON</code>, \
   so aside from primitive Java data types and typeless <code>JSONObject</code> / <code>JSONArray</code>, \
   you can use Stapler databinding to accept typed structured data.
tips.description.1.more=After defining the parameters from JavaScript, you can additionally define parameters that are \
   injectable by Stapler, such as <code>StaplerRequest</code> or <code>StaplerResponse</code>.
tips.description.2=Exporting null
tips.description.2.body=If the value attribute of a <code>st:bind</code> tag evaluates to \
   <code>null</code>, then the corresponding JavaScript proxy will be <code>null</code>.
