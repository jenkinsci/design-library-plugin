description.1=Dans Jenkins, vous pouvez exporter n''importe quel objet Java c\u00f4t\u00e9 serveur vers JavaScript via un proxy, puis appeler ses m\u00e9thodes depuis JavaScript. Dans cet exemple, nous appelons une m\u00e9thode sur le serveur pour incr\u00e9menter un compteur. Cet objet est un singleton, donc vous verrez la m\u00eame valeur de compteur dans tous les navigateurs.
description.2=Pour exposer une m\u00e9thode d''une classe Java \u00e0 un proxy JavaScript, annotez la m\u00e9thode avec <code>@JavaScriptMethod</code>. Pour des raisons de s\u00e9curit\u00e9, seules les m\u00e9thodes publiques sur les classes publiques annot\u00e9es avec cette annotation sont appelables \u00e0 partir des navigateurs\u00a0:
description.3=Ensuite, \u00e0 partir des scripts Jelly, utilisez la balise <code>st:bind</code> pour exporter un objet Java dans un proxy. L''attribut "value" est \u00e9valu\u00e9 vers un objet Java c\u00f4t\u00e9 serveur \u00e0 exporter, et la balise produit une expression JavaScript qui cr\u00e9e un proxy. Dans l''exemple ci-dessous, nous faisons semblant que l''expression <a href="https://commons.apache.org/proper/commons-jexl/">JEXL</a> est \u00e9valu\u00e9e \u00e0 une certaine instance de Foo.
invokingMethod=Invocation de la m\u00e9thode
invokingMethod.description.1=Comme vous pouvez le voir ci-dessus, on peut appeler des m\u00e9thodes sur le proxy cr\u00e9\u00e9es par la balise <code>st:bind</code> . La m\u00e9thode JavaScript prend les arguments que prend la m\u00e9thode Java, et elle peut de fa\u00e7on optionnelle prendre une fonction en tant que param\u00e8tre suppl\u00e9mentaire. Cette derni\u00e8re est utilis\u00e9e comme m\u00e9thode de callback lorsque la valeur retourn\u00e9e est disponible. La m\u00e9thode callback re\u00e7oit un objet Ajax.Response.
invokingMethod.description.2=Si la m\u00e9thode Java retourne une valeur d''objet (comme <code>int, String, Collection, Object[], JSONObject</code>, etc.) , vous pouvez utiliser la m\u00e9thode <code>responseObject()</code> pour \u00e9valuer la r\u00e9ponse dans un objet JavaScript et l''utiliser. Si la m\u00e9thode Java retourne une r\u00e9ponse HTTP plus complexe (par exemple en \u00e9crivant directement dans <code>StaplerResponse</code> ou en renvoyant un <code>HttpResponse</code>), JavaScript peut utiliser d''autres m\u00e9thodes <code>Ajax.Response</code> pour acc\u00e9der \u00e0 la r\u00e9ponse HTTP compl\u00e8te.
invokingMethod.description.3=L''appel \u00e0 la m\u00e9thode utilise <code>XmlHttpRequest</code> par derri\u00e8re, et cet appel est finalement rout\u00e9 vers l''appel de m\u00e9thode correspondant sur l''instance exacte qui a \u00e9t\u00e9 export\u00e9e.
tips=Astuces
tips.description.1=Param\u00e8tres de la m\u00e9thode Java c\u00f4t\u00e9 serveur
tips.description.1.body=La m\u00e9thode Java peut d\u00e9finir un nombre arbitraire de param\u00e8tres pour JavaScript. Chaque param\u00e8tre est converti depuis JSON vers Java via <code>StaplerRequest.bindJSON</code>, donc en plus des types de donn\u00e9es Java primitifs et de <code>JSONObject</code>/<code>JSONArray</code> non typ\u00e9s, vous pouvez utiliser le couplage de donn\u00e9es Stapler pour accepter les donn\u00e9es structur\u00e9es typ\u00e9es.
tips.description.1.more=Apr\u00e8s avoir d\u00e9fini les param\u00e8tres de JavaScript, vous pouvez \u00e9galement d\u00e9finir des param\u00e8tres qui sont injectables par Stapler, comme <code>StaplerRequest</code> ou <code>StaplerResponse</code>.
tips.description.2=Exportation de null
tips.description.2.body=Si l''attribut value d''une balise &lt;st:bind&gt; est \u00e9valu\u00e9 \u00e0 <code>null</code>, alors le proxy JavaScript correspondant sera <code>null</code>.
