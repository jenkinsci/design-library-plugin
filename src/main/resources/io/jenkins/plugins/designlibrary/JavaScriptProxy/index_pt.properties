description.1=Em Jenkins, voc\u00ea pode exportar objetos Java arbitr\u00e1rios do lado do servidor para JavaScript atrav\u00e9s de um *proxy* (procurador), em seguida, invocar seus m\u00e9todos em JavaScript. Nesta amostra, chamamos um m\u00e9todo no servidor para incrementar um contador. Este objeto \u00e9 um singleton, ent\u00e3o voc\u00ea ver\u00e1 o mesmo valor do contador em todos os navegadores.
description.2=Para expor um m\u00e9todo de uma classe Java a um procurador JavaScript, anote o m\u00e9todo com <code>@JavaScriptMethod</code>. Por raz\u00f5es de seguran\u00e7a, apenas m\u00e9todos p\u00fablicos nas classes p\u00fablicas com esta anota\u00e7\u00e3o s\u00e3o invoc\u00e1veis a partir de navegadores:
description.3=Ent\u00e3o a partir de scripts do Jelly, use a etiqueta <code>st:bind</code> para exportar um objeto Java para um procurador. O atributo "valor" \u00e9 avaliado para um objeto Java do lado do servidor a ser exportado e a etiqueta produz uma express\u00e3o JavaScript que cria um procurador. No exemplo abaixo, estamos fingindo que a express\u00e3o <a href="https://commons.apache.org/proper/commons-jexl/">JEXL</a> avalia alguma inst\u00e2ncia de Foo.
invokingMethod=M\u00e9todo de chamada
invokingMethod.description.1=Como voc\u00ea pode ver acima, pode-se invocar m\u00e9todos no procurador criado pela etiqueta <code>st:bind</code>. O m\u00e9todo JavaScript utiliza os argumentos que o m\u00e9todo Java recebe, ent\u00e3o ele pode opcionalmente aceitar uma fun\u00e7\u00e3o como par\u00e2metro adicional, cujo o qual \u00e9 usado como m\u00e9todo de chamada de retorno quando o valor de retorno estiver dispon\u00edvel. O m\u00e9todo de chamada de retorno recebe um objeto Ajax.Response.
invokingMethod.description.2=Se o m\u00e9todo Java retorna um valor de objeto (como <code>int, String, Collection, Object[], JSONObject</code>, etc.), voc\u00ea pode usar o m\u00e9todo <code>responseObject()</code> para avaliar a resposta em um objeto JavaScript e us\u00e1-lo. Se o m\u00e9todo Java renderizar uma resposta HTTP mais complexa (por exemplo, escrevendo diretamente para <code>StaplerResponse</code> ou retornando um <code>HttpResponse</code>), o JavaScript pode usar outros m\u00e9todos do <code>Ajax.Response</code> para acessar a resposta HTTP completa.
invokingMethod.description.3=O m\u00e9todo de chamada usa <code>XmlHttpRequest</code> nos bastidores e \u00e9 eventualmente encaminhado para a chamada do m\u00e9todo correspondente na inst\u00e2ncia exata exportada.
tips=Dicas
tips.description.1=Par\u00e2metros do m\u00e9todo do servidor Java
tips.description.1.body=O m\u00e9todo Java pode definir um n\u00famero arbitr\u00e1rio de par\u00e2metros para o JavaScript. Cada par\u00e2metro \u00e9 convertido do JSON para Java atrav\u00e9s do <code>StaplerRequest.bindJSON</code>, ent\u00e3o al\u00e9m dos tipos de dados primitivos do Java e <code>JSONObject</code> / <code>JSONArray</code> sem tipagem, voc\u00ea pode usar a amarra\u00e7\u00e3o de dados do Stapler para aceitar dados tipados estruturados.
tips.description.1.more=Ap\u00f3s definir os par\u00e2metros do JavaScript voc\u00ea pode adicionalmente definir par\u00e2metros injet\u00e1veis pelo Stapler, como <code>StaplerRequest</code> ou <code>StaplerResponse</code>.
tips.description.2=Exportando nulo
tips.description.2.body=Se o atributo valor de uma etiqueta &lt;st:bind&gt; for avaliado como <code>null</code>, ent\u00e3o o procurador JavaScript correspondente ser\u00e1 <code>null</code>.
