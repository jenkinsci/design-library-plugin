<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:l="/lib/layout" xmlns:s="/lib/samples" xmlns:f="/lib/form">
  <s:sample>
    <p class="jdl-leading-paragraph">${%description}</p>
    <template id="demo-template" data-title="${%Modal}">
      <div>
        <h2 class="jenkins-dialog__subtitle">${%Behaviour}</h2>
        Click on the "X" in the top right or outside to close me.
        <h2 class="jenkins-dialog__subtitle jenkins-!-margin-top-3">${%You can include icons}</h2>
        <l:icon src="symbol-chatbox-outline plugin-ionicons-api" class="icon-sm"/> Dialogs are cool.
      </div>
    </template>
    <div id="demo-form" class="jenkins-hidden">
      <f:form action="form" method="post">
        <h2>Order your ice cream</h2>
        <f:entry field="name" title="Name">
          <f:textbox/>
        </f:entry>
        <f:entry field="quantity" title="Quantity">
          <f:number min="1" max="9"/>
        </f:entry>
        <f:entry title="Choose flavor">
          <f:select field="flavor"/>
        </f:entry>
      </f:form>
    </div>

    <l:tabPane title="Alerts">
        <p class="jdl-paragraph">Replaces the browser built-in <em>alert(message)</em>. Contrary to the
          built-in the code will not wait until the user has closed the alert but as long as the alert is
          shown the user can't do anything else. Clicking outside the dialog will have no effect, the button
          must be used to close it.<br/>
          Alerts are usually used to show error messages.
        </p>
        <s:code language="java" file="alert.js" code="showAlert()" executable="true"/>
      </l:tabPane>
      <l:tabPane title="Prompts">
        <p class="jdl-paragraph">Replaces the browser built-in <em>prompt(message)</em> to query a single value
          from a user. This returns a promise that allows the script to react when the user has entered the
          value or aborted. Clicking outside the dialog will have no effect, the buttons
          must be used to close it.<br/>
        </p>
        <s:code language="java" file="prompt.js" code="showPrompt()" executable="true"/>
      </l:tabPane>
      <l:tabPane title="Confirmations">
        <p class="jdl-paragraph">Replaces the browser built-in <em>confirm(message)</em> to make a user confirm
          an action. This returns a promise that allows the script to react when the user has confirmed or
          denied. Clicking outside the dailog will have no effect, the buttons
          must be used to close it.<br/>
        </p>
        <s:code language="java" file="confirm.js" code="showConfirm()" executable="true"/>
      </l:tabPane>
      <l:tabPane title="Modals">
        <p class="jdl-paragraph">Presents a popup to the user with arbitrary information. A modal hos no buttons
          at the bottom. Instead a close button is added to the upper right corner (can also be hidden).
          The dialog is also closed when clicking outside of it.
        </p>
        <s:code language="java" file="modal.js" code="showModal()" executable="true"/>
        <s:code language="xml" file="modal.jelly"/>
      </l:tabPane>
    <l:tabPane title="Forms">
      <p class="jdl-paragraph">Shows a form inside a dialog. For proper functionality, do not wrap the template inside
        a <code>template</code> block as scripts that are included by forms are not loaded immediately in that case.
        You can either handle the form directly or submit the form.
      </p>
      <br/><br/>
      <f:toggleSwitch id="formsubmit" checkedTitle="Submit form" checked="true"
                      title="Handle form in javascript."
      />
      <s:code language="java" file="form.js" code="showForm()" executable="true"/>
      <s:code language="xml" file="form.jelly"/>
    </l:tabPane>
      <hr/>
      <div>
        <h2>Customizing the appearance and behaviour</h2>
        All dialogs take a second optional parameter with options that allow to change certain aspects.
        <ul>
          <li><code>title</code>: Adds a title to the dialog</li>
          <li><code>okText</code>: Adjust the text of the OK button, defaults to <code>OK</code> or <code>Yes</code></li>
          <li><code>cancelText</code>: Adjust the text of the Cancel button, defaults to <code>Cancel</code></li>
          <li><code>type</code>: Change the color of the <code>OK</code> button. Allowed values: <code>destructive</code></li>
          <li><code>maxWidth</code>: Set the maximum width of the dialog, defaults to <code>475px</code></li>
          <li><code>minWidth</code>: Set the minimum width of the dialog, defaults to empty</li>
          <li><code>hideCloseButton</code>: Hides the close button in modal dialogs, defaults to <code>false</code></li>
          <li><code>allowEmpty</code>: When set to <code>false</code> the <code>OK</code> button will be disabled in the
            prompt dialog as long as the input field is empty or contains only whitespace, defaults to <code>false</code></li>
          <li><code>submitButton</code>: Change the behaviour of the submit button in a form dialog. When <code>true</code>
            the form will be submitted to the <code>action</code> attribute of the form. When <code>false</code>, a
            <code>FormData</code> object is passed to the <code>resolve</code> method of the <code>Promise</code>.
            Defaults to <code>true</code></li>
        </ul>

      </div>
      <st:adjunct includes="io.jenkins.plugins.designlibrary.Dialogs.dialogs"/>
      <script src="${resURL}/jsbundles/section-to-tabs.js" type="text/javascript" />
  </s:sample>
</j:jelly>
